global(VERSION_sipka.cmdline) = "0.8.3"

compile(
	out runtimejavac,
	out apijavac,
	out procjavac,
) {
	$runtimejavac = saker.java.compile(
		SourceDirectories: runtime/src/,
		Identifier: runtime,
		SourceVersion: RELEASE_8,
		TargetVersion: RELEASE_8,
		Parameters: [--release, 8]
	)
	$apijavac = saker.java.compile(
		SourceDirectories: [ api/src/ ],
		Identifier: api,
		SourceVersion: RELEASE_8,
		TargetVersion: RELEASE_8,
		Parameters: [--release, 8]
	)
	$procjavac = saker.java.compile(
		SourceDirectories: [
			processor/src/, 
		],
		ClassPath: [
			$apijavac,
			$runtimejavac,
		],
		Identifier: processor,
		SourceVersion: RELEASE_8,
		TargetVersion: RELEASE_8,
		Parameters: [--release, 8]
	)
}
export(
	out apijar,
	out procjar,
	out runtimejar,
	out sourcejar,
	
	out bundlepaths = [
		$apijar[Path],
		$procjar[Path],
		$runtimejar[Path],
		$sourcejar[Path],
	]
) {
	$compile = include(compile)
	
	$apijar = saker.jar.create(
		Output: sipka.cmdline-api.jar,
		Resources: [
			{
				Directory: $compile[apijavac][ClassDirectory],
				Resources: **,
			},
			{
				Directory: $compile[runtimejavac][ClassDirectory],
				Resources: **,
			},
			{
				Directory: api/resources/,
				Resources: **,
			},
			{
				Files: api/LICENSE,
				TargetDirectory: META-INF,
			},
		],
		Manifest: {
			MainAttributes: {
				Nest-Bundle-Format-Version: 1,
				Nest-Bundle-Identifier: "sipka.cmdline-api-v{ global(VERSION_sipka.cmdline) }",
				Nest-Bundle-Source: "sipka.cmdline-sources-v{ global(VERSION_sipka.cmdline) }",
			},
		},
	)
	$procjar = saker.jar.create(
		Output: sipka.cmdline-processor.jar,
		Resources: [
			{
				Directory: $compile[procjavac][ClassDirectory],
				Resources: **,
			},
			{
				Directory: processor/resources/,
				Resources: **,
			},
			{
				Files: processor/LICENSE,
				TargetDirectory: META-INF,
			},
		],
		Manifest: {
			MainAttributes: {
				Nest-Bundle-Format-Version: 1,
				Nest-Bundle-Identifier: "sipka.cmdline-processor-v{ global(VERSION_sipka.cmdline) }",
				Nest-Bundle-Source: "sipka.cmdline-sources-v{ global(VERSION_sipka.cmdline) }",
			},
		},
	)
	$runtimejar = saker.jar.create(
		Output: sipka.cmdline-runtime.jar,
		Resources: [
			{
				Directory: $compile[runtimejavac][ClassDirectory],
				Resources: **,
			},
			{
				Directory: runtime/resources/,
				Resources: **,
			},
			{
				Files: runtime/LICENSE,
				TargetDirectory: META-INF,
			},
		],
		Manifest: {
			MainAttributes: {
				Nest-Bundle-Format-Version: 1,
				Nest-Bundle-Identifier: "sipka.cmdline-runtime-v{ global(VERSION_sipka.cmdline) }",
				Nest-Bundle-Source: "sipka.cmdline-sources-v{ global(VERSION_sipka.cmdline) }",
			},
		},
	)
	$sourcejar = saker.jar.create(
		Output: sipka.cmdline-sources.jar,
		Resources: [
			{
				Directory: [api/src/, runtime/src/, processor/src/],
				Resources: **/*.java,
			},
			{
				Files: processor/LICENSE,
				TargetDirectory: META-INF,
			},
		],
		Manifest: {
			MainAttributes: {
				Nest-Bundle-Format-Version: 1,
				Nest-Bundle-Identifier: "sipka.cmdline-sources-v{ global(VERSION_sipka.cmdline) }",
			},
		},
	)
}
install(){
	$export = include(export)
	nest.local.install(Bundle: $export[bundlepaths])
}
upload(){
	$export = include(export, Path: saker.build)
	include(Path: secret/secrets.build)
	nest.server.upload(
		Bundles: $export[bundlepaths],
		APIKey: global(sipka.cmdline.UPLOAD_API_KEY),
		APISecret: global(sipka.cmdline.UPLOAD_API_SECRET),
		Overwrite: true,
	)
}
unittest(){
	$testrunnercp = saker.java.classpath.bundle(nest.dependency.resolve(
		saker.build-test-runner,
		Filters: nest.dependency.filter.kind([]),
	))
	$compile = include(compile);
	$testcompile = saker.java.compile(
		SourceDirectories: test/unit/,
		ClassPath: [
			$compile[runtimejavac],
			$testrunnercp,
		],
		Identifier: unittest,
	)
	saker.java.test(
		TestRunnerClassPath: [
			$testrunnercp,
		],
		ClassPath: [
			$compile[runtimejavac][ClassDirectory],
		],
		TestClassPath: [
			$testcompile[ClassDirectory],
		],
		TestInvokerClass: testing.saker.SakerJavaTestingInvoker,
		TestClasses: [
			**.*Test,
		],
		NonDeterministicTests: [
			**,
		],
		MaxJVMCount: 1,
		FailFast: true,
		AbortOnFail: true,
		Verbose: true,
	)
}
